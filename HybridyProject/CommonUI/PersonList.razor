@using System.Net.Http.Json
@using WebDomain

<h3>PersonList</h3>

@if (People == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in People)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => Edit(item.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => Delete(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    private HttpClient _httpClient { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    public IEnumerable<Person> People { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await _httpClient.GetAsync("Persons");
            if (response.IsSuccessStatusCode)
            {
                if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                {
                    People = Enumerable.Empty<Person>();
                }

                People = await response.Content.ReadFromJsonAsync<IEnumerable<Person>>();
            }
            else
            {
                var message = await response.Content.ReadAsStringAsync();
                throw new Exception($"Http status code: {response.StatusCode} message: {message}");
            }
        }
        catch (Exception ex)
        {
            // Log the exception details for debugging
            Console.WriteLine($"Error in GetItems(): {ex}");
            throw;
        }

    }

    private void Edit(int id)
    {
        _navigationManager.NavigateTo($"/AddEditPerson/{id}");
    }

    private async Task Delete(int id)
    {
        try
        {
            var response = await _httpClient.DeleteAsync($"Persons/{id}");
            if (response.IsSuccessStatusCode)
            {
                _navigationManager.NavigateTo("PersonList");
            }
            else
            {
                var message = await response.Content.ReadAsStringAsync();
                throw new Exception($"Http status code: {response.StatusCode} message: {message}");
            }
        }
        catch (Exception)
        {
            // Log exception
            throw;
        }
    }
}
